operation request : int
operation response : int list
operation nextItem : unit
operation display : string
operation batchSizeRequest : unit
operation batchSizeResponse : int


let client () =
    let cachedData = ref [] in
    let requestInProgress = ref false in

    send batchSizeRequest ();
    let batchSizePromise = promise (batchSizeResponse batchSize -> return <<batchSize>>) in

    let requestNewData offset =
        requestInProgress := true;
        send request offset;
        promise (response newBatch ->
            cachedData := !cachedData @ newBatch;
            requestInProgress := false;
            return <<()>>);
        ()
    in

    let clientLoop batchSize =
        promise (nextItem () r currentItem ->
            let cachedSize = length !cachedData in
            if (currentItem > cachedSize - batchSize / 2) && (not !requestInProgress) then
                 requestNewData (cachedSize + 1);
                 r currentItem
             else if (currentItem) < cachedSize then
                 send display (toString (nth !cachedData currentItem));
                 r (currentItem + 1)
             else  
                 (send display "please wait a bit and try again"; r currentItem)) at 0
    in

    let batchSize = await batchSizePromise in
    clientLoop batchSize

let server batchSize =
    promise (batchSizeRequest () r ->
        send batchSizeResponse batchSize;
        r ());
    promise (request offset r ->
        let payload = map (fun x -> 10 * x) (range offset (offset + batchSize - 1)) in
        send response payload;
        r ())


let rec user n =
    if n > 0 then
        let rec wait n = 
        if n = 0 then return () else wait (n - 1)
        in
        send nextItem ();
        wait 10;
        user (n - 1)
    else
        ()


run (server 42)
run (client ())
run (user 42)
