operation call : int * int
operation result : int * int

let naiveCallWith x =
    send call x;
    let p = promise (result y -> return <<y>>) in
    fun () -> return await p

let callWith callCounter =
    fun x ->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        let p = promise (result (y, callNo') when callNo = callNo' ->
            return <<y>>
        ) in
        let valueThunk () = await p in
        return valueThunk

let remote f =
    promise (call (x, callNo) r ->
        let y = f x in
        send result (y, callNo);
        r ()
    )

run
    let callCounter = ref 0 in
    let yt = callWith callCounter 2 in
    let zt = callWith callCounter 3 in
    return ((yt () * yt ()) + (zt () * zt ()))

run
    remote (fun x -> 4 * (5 * (6 * x)))
