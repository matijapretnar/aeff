operation call : int * int
operation result : int * int
operation cancel : int
operation impossible : empty

let callWith callCounter =
    fun x ->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        let p = promise (result (y, callNo') when callNo = callNo' ->
            return <<y>>
        ) in
        let valueThunk () = await p in
        let cancelThunk () = send cancel callNo in
        let changeMind x = cancelThunk (); send call (x, callNo) in
        return (valueThunk, cancelThunk, changeMind)

let remote f =
    promise (call (x, callNo) r ->
        spawn (
            promise (cancel callNo' impossibleR when callNo = callNo' ->
                let impossiblePromise = promise (impossible empty -> return <<empty>>) in
                await impossiblePromise;
                impossibleR ()
            );
            let y = (unbox f) x in
            send result (y, callNo)
        );
        r ()
    )

run
    let callCounter = ref 0 in
    let result1, cancel1, changeMind1 = callWith callCounter 1 in
    let result2, cancel2, changeMind2 = callWith callCounter 2 in
    cancel1 ();
    let result3, cancel3, changeMind3 = callWith callCounter 3 in
    changeMind3 (result2 ());
    result3 ()

run
    remote [| fun x -> 4 * (5 * (6 * x)) |]
