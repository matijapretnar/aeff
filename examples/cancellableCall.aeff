operation call : int * int
operation result : int * int
operation cancel : int
operation dummy : empty

let callWith callCounter =
    fun x ->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        let p = promise (result (y, callNo') when callNo = callNo' ->
            return <<y>>
        ) in
        let valueThunk () = await p in
        let cancelThunk () = send cancel callNo in
        let changeMind x = cancelThunk (); send call (x, callNo) in
        return (valueThunk, cancelThunk, changeMind)

let rec awaitCancel callNo runBeforeStall =
    promise (cancel callNo' when callNo = callNo'->
        let dummyPromise = promise (dummy empty -> return <<empty>>) in
        runBeforeStall ();
        await dummyPromise;
        awaitCancel callNo runBeforeStall
    )

let remote f =
    let rec loop () =
        promise (call (x, callNo) ->
            awaitCancel callNo loop;
            let y = f x in
            send result (y, callNo);
            loop ()
        )
    in
    loop ()

let remoteCallReInvoker () =
    let callsToReInvoke = ref [] in
    let rec reInvokerCall () =
        promise (call (x,callNo) ->
            callsToReInvoke := (x, callNo) :: !callsToReInvoke;
            reInvokerCall ()
        )
    in
    let rec reInvokerResult () =
        promise (result (y, callNo) ->
            callsToReInvoke := filter (fun (_, callNo') -> callNo <> callNo') !callsToReInvoke;
            reInvokerResult ()
        )
    in
    let rec reInvokerCancel () =
        let rec reInvokerWrapper calls =
            match calls with
            | [] -> return ()
            | (x, callNo) :: calls -> send call (x, callNo); reInvokerWrapper calls
        in
        promise (cancel callNo ->
            callsToReInvoke := filter (fun (_, callNo') -> callNo <> callNo') !callsToReInvoke;
            reInvokerWrapper (reverse !callsToReInvoke);
            reInvokerCancel ()
        )
    in
    reInvokerCall ();
    reInvokerResult ();
    reInvokerCancel ()

run
    let callCounter = ref 0 in
    let result1, cancel1, changeMind1 = callWith callCounter 1 in
    let result2, cancel2, changeMind2 = callWith callCounter 2 in
    cancel1 ();
    let result3, cancel3, changeMind3 = callWith callCounter 3 in
    changeMind3 (result2 ());
    result3 ()

run
    remoteCallReInvoker ()

run
    remote (fun x -> 4 * (5 * (6 * x)))