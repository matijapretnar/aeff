type 'm mobileList = 
  | Empty 
  | Something of [|'m|] * 'm mobileList
operation theGood : (unit -> int) mobileList

(*
type 'm immobileList = 
  | Empty 
  | Something of <<'m>> * 'm immobileList
operation theBad : (unit -> int) immobileList
*)


type 'm left1 = 
  | One of [|'m|] 
  | Two of [|'m|] * 'm right1
and 'm right1 = 
  | Three of [|'m|]
  | Four of [|'m|] * <<'m>> left1
operation andTheUgly : int left1

(*
type 'm left2 = 
  | One of [|'m|] 
  | Two of [|'m|] * 'm right2
and 'm right2 = 
  | Three of 'm
  | Four of [|'m|] * <<'m>> left2
operation badAndUgly : int left2
*)



type ('a, 'b) foo  = [|'a|] * 'b
operation bar1 : (<<int>>, int) foo
(*
operation bar2 : (int, <<int>>) foo 
*)