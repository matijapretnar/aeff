operation call : int * int
operation result : int * int

let naiveCallWith x =
    send call x;
    promise (result y -> return <<y>>) as p in
    fun () -> return awaitValue p

let callWith callCounter =
    fun x ->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        promise (result (y, callNo') when callNo = callNo' ->
            return <<y>>
        ) as p in
        let valueThunk () = awaitValue p in
        return valueThunk

let remote f =
    let rec loop () =
        promise (call (x, callNo) ->
            let y = f x in
            send result (y, callNo);
            loop ()
        ) as p in return p
    in
    loop ()

run
    let callCounter = ref 0 in
    let yt = callWith callCounter 2 in
    let zt = callWith callCounter 3 in
    return ((yt () * yt ()) + (zt () * zt ()))

run
    remote (fun x -> 4 * (5 * (6 * x)))
