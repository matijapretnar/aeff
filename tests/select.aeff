operation op1 : int
operation op2 : int

let select f g k =
  let i = ref 0 in
  let v1 = ref None in
  let v2 = ref None in
  let p1 = promise (op1 x ->
    if !i = 0
    then (let q1 = f x in
          let y1 = await q1 in
          v1 := Some y1;
          i := 1;
          return <<()>>)
    else return <<()>>) in
  let p2 = promise (op2 x ->
    if !i = 0
    then (let q2 = g x in
          let y2 = await q2 in
          v2 := Some y2;
          i := 2;
          return <<()>>)
    else return <<()>>) in
  let rec waitForOp () =
    if !i = 0 then waitForOp ()
    else if !i = 1 then (match !v1 with | Some v -> k <<v>>)
    else (match !v2 with | Some v -> k <<v>>)
  in
  waitForOp ()


run
  send op1 1

run
  send op2 2

run
  select
    (fun x -> return <<x + 24>>)
    (fun x -> return <<x + 42>>)
    (fun p -> let x = await p in return x * x)